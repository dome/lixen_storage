<?php

require_once dirname(__FILE__) . '/../JsonSchema.php';

/**
 * Test class for JsonSchema.
 * Generated by PHPUnit on 2010-12-13 at 09:42:37.
 */
class JsonSchemaTest extends PHPUnit_Framework_TestCase {

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {

    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    /**
     */
    public function testGetSchema() {
        echo 'test generate', PHP_EOL;
        echo 'string', PHP_EOL;
        $value = 'test string';
        $jsonSchema = new JsonSchema(json_encode($value));
        parent::assertEquals('{"type":"string","format":"regex","pattern":"\/^[a-z0-9]+$\/i","minLength":0,"maxLength":2147483647}', $jsonSchema->getSchema());

        echo 'number', PHP_EOL;
        $value = 123.321;
        $jsonSchema = new JsonSchema(json_encode($value));
        parent::assertEquals('{"type":"number","default":0,"minimum":0,"maximum":2147483647,"exclusiveMinimum":0,"exclusiveMaximum":2147483647}', $jsonSchema->getSchema());

        echo 'integer', PHP_EOL;
        $value = 123;
        $jsonSchema = new JsonSchema(json_encode($value));
        parent::assertEquals('{"type":"integer","default":0,"minimum":0,"maximum":2147483647,"exclusiveMinimum":0,"exclusiveMaximum":2147483647}', $jsonSchema->getSchema());


        echo 'boolean', PHP_EOL;
        $value = true;
        $jsonSchema = new JsonSchema(json_encode($value));
        parent::assertEquals('{"type":"boolean","default":false}', $jsonSchema->getSchema());

        echo 'object', PHP_EOL;
        $value = new stdClass();
        $value->name = 'a name';
        $value->age = 23;
        $value->height = 183.5;
        $jsonSchema = new JsonSchema(json_encode($value));
        parent::assertEquals('{"type":"object","properties":{"name":{"type":"string","format":"regex","pattern":"\/^[a-z0-9]+$\/i","minLength":0,"maxLength":2147483647},"age":{"type":"integer","default":0,"minimum":0,"maximum":2147483647,"exclusiveMinimum":0,"exclusiveMaximum":2147483647},"height":{"type":"number","default":0,"minimum":0,"maximum":2147483647,"exclusiveMinimum":0,"exclusiveMaximum":2147483647}}}', $jsonSchema->getSchema());


        echo 'array Map', PHP_EOL;
        $value = array();
        $value['name'] = 'a name';
        $value['age'] = 23;
        $value['height'] = 183.5;
        $jsonSchema = new JsonSchema(json_encode($value));
        parent::assertEquals('{"type":"object","properties":{"name":{"type":"string","format":"regex","pattern":"\/^[a-z0-9]+$\/i","minLength":0,"maxLength":2147483647},"age":{"type":"integer","default":0,"minimum":0,"maximum":2147483647,"exclusiveMinimum":0,"exclusiveMaximum":2147483647},"height":{"type":"number","default":0,"minimum":0,"maximum":2147483647,"exclusiveMinimum":0,"exclusiveMaximum":2147483647}}}', $jsonSchema->getSchema());

        echo 'array List', PHP_EOL;
        $value = array();
        $value[] = 'a name';
        $value[] = 23;
        $value[] = 183.5;
        $jsonSchema = new JsonSchema(json_encode($value));
        parent::assertEquals('{"type":"array","minItems":0,"maxItems":20,"items":{"type":"string","format":"regex","pattern":"\/^[a-z0-9]+$\/i","minLength":0,"maxLength":2147483647}}', $jsonSchema->getSchema());


        echo 'array List<Map>', PHP_EOL;
        $value = array();
        $value['users'][] = array('id' => 1, 'account' => 'userA');
        $value['users'][] = array('id' => 3, 'account' => 'userB');
        $value['users'][] = array('id' => 5, 'account' => 'userC');
        $jsonSchema = new JsonSchema(json_encode($value));
        parent::assertEquals('{"type":"object","properties":{"users":{"type":"array","minItems":0,"maxItems":20,"items":{"type":"object","properties":{"id":{"type":"integer","default":0,"minimum":0,"maximum":2147483647,"exclusiveMinimum":0,"exclusiveMaximum":2147483647},"account":{"type":"string","format":"regex","pattern":"\/^[a-z0-9]+$\/i","minLength":0,"maxLength":2147483647}}}}}}', $jsonSchema->getSchema());
    }

    /**
     */
    public function testValidate() {
        echo 'test validate', PHP_EOL;

        echo 'string', PHP_EOL;
        $value = 'test string';
        $jsonSchema = new JsonSchema(json_encode($value));
        parent::assertTrue($jsonSchema->validate('{"type":"string","minLength":0,"maxLength":2147483647}'));

        echo 'string', PHP_EOL;
        $value = 'test.string';
        $jsonSchema = new JsonSchema(json_encode($value));
        parent::assertTrue($jsonSchema->validate('{"type":"string","format":"regex","pattern":"\/^[a-z.]+$\/i","minLength":0,"maxLength":2147483647}'));

        echo 'number', PHP_EOL;
        $value = 123.321;
        $jsonSchema = new JsonSchema(json_encode($value));
        parent::assertTrue($jsonSchema->validate('{"type":"number","default":0,"minimum":0,"maximum":2147483647,"exclusiveMinimum":0,"exclusiveMaximum":2147483647}'));

        echo 'integer', PHP_EOL;
        $value = 123;
        $jsonSchema = new JsonSchema(json_encode($value));
        parent::assertTrue($jsonSchema->validate('{"type":"integer","default":0,"minimum":0,"maximum":2147483647,"exclusiveMinimum":0,"exclusiveMaximum":2147483647}'));


        echo 'boolean', PHP_EOL;
        $value = true;
        $jsonSchema = new JsonSchema(json_encode($value));
        parent::assertTrue($jsonSchema->validate('{"type":"boolean","default":false}'));

        echo 'integer or boolean', PHP_EOL;
        $value = true;
        $jsonSchema = new JsonSchema(json_encode($value));
        parent::assertTrue($jsonSchema->validate('{"type":["boolean","integer"],"default":false}'));
        $value = 123;
        $jsonSchema = new JsonSchema(json_encode($value));
        parent::assertTrue($jsonSchema->validate('{"type":["boolean","integer"],"default":false}'));

        echo 'object', PHP_EOL;
        $value = new stdClass();
        $value->name = 'a name';
        $value->age = 23;
        $value->height = 183.5;
        $jsonSchema = new JsonSchema(json_encode($value));
        parent::assertTrue($jsonSchema->validate('{"type":"object","properties":{"name":{"type":"string","format":"regex","pattern":"/^[a-z0-9 ]+$/i","minLength":0,"maxLength":2147483647},"age":{"type":"integer","default":0,"minimum":0,"maximum":2147483647,"exclusiveMinimum":0,"exclusiveMaximum":2147483647},"height":{"type":"number","default":0,"minimum":0,"maximum":2147483647,"exclusiveMinimum":0,"exclusiveMaximum":2147483647}}}'));

        echo 'array Map', PHP_EOL;
        $value = array();
        $value['name'] = 'a name';
        $value['age'] = 23;
        $value['height'] = 183.5;
        $jsonSchema = new JsonSchema(json_encode($value));
        parent::assertTrue($jsonSchema->validate('{"type":"object","properties":{"name":{"type":"string","format":"regex","pattern":"/^[a-z0-9 ]+$/i","minLength":0,"maxLength":2147483647},"age":{"type":"integer","default":0,"minimum":0,"maximum":2147483647,"exclusiveMinimum":0,"exclusiveMaximum":2147483647},"height":{"type":"number","default":0,"minimum":0,"maximum":2147483647,"exclusiveMinimum":0,"exclusiveMaximum":2147483647}}}'));

        echo 'array List', PHP_EOL;
        $value = array();
        $value[] = 'str A';
        $value[] = 'str B';
        $value[] = 'str C';
        $jsonSchema = new JsonSchema(json_encode($value));
        parent::assertTrue($jsonSchema->validate('
            {
               "type":"array",
               "items":{
                  "type":"string",
                  "format":"regex","pattern":"/^[a-z0-9 ]+$/i",
                  "minLength":0,
                  "maxLength":2147483647
               }
            }'));

        echo 'array List<Map>', PHP_EOL;
        $value = array();
        $value['users'][] = array('id' => 1, 'account' => 'userA');
        $value['users'][] = array('id' => 3, 'account' => 'userB');
        $value['users'][] = array('id' => 5, 'account' => 'userC');
        $jsonSchema = new JsonSchema(json_encode($value));
        parent::assertTrue($jsonSchema->validate('{
                                                   "type":"object",
                                                   "properties":{
                                                      "users":{
                                                         "type":"array",
                                                         "items":{
                                                            "type":"object",
                                                            "properties":{
                                                               "id":{
                                                                  "type":"integer",
                                                                  "default":0,
                                                                  "minimum":0,
                                                                  "maximum":2147483647,
                                                                  "exclusiveMinimum":0,
                                                                  "exclusiveMaximum":2147483647
                                                               },
                                                               "account":{
                                                                  "type":"string",
                                                                  "minLength":0,
                                                                  "maxLength":2147483647
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }'));
    }

    /**
     */
    public function testAddType() {
        $userType = '
            {
                "id": "user",
                "description": "user info",
                "type": "object",
                "optional": true,
                "properties": {
                    "account": {"type": "string"},
                    "email": {"type": "string", "optional": true}
                }
            }';
        echo 'array List<Map>', PHP_EOL;
        $type = array();
        $type['users'][] = array('account' => 'userA', 'email' => 'userA@example.com');
        $type['users'][] = array('account' => 'userB', 'email' => 'userB@example.com');
        $type['users'][] = array('account' => 'userC', 'email' => 'userC@example.com');
        $jsonSchema = new JsonSchema(json_encode($type));
        $jsonSchema->addType($userType);
        parent::assertTrue($jsonSchema->validate('
            {
               "type":"object",
               "properties":{
                  "users":{
                     "type":"array",
                     "items":{
                        "$ref":"user"
                     }
                  }
               }
            }'));
    }

    /**
     */
    public function testGetErrors() {


        echo 'string', PHP_EOL;
        $value = 'test s p a c e s string';
        $jsonSchema = new JsonSchema(json_encode($value));

        parent::assertFalse($jsonSchema->validate('{"type":"string","format":"regex","pattern":"\/^[a-z.]+$\/i","minLength":0,"maxLength":2147483647}'));
        parent::assertEquals(count($jsonSchema->getErrors()), 1);



        echo 'number', PHP_EOL;
        $value = 123.321;
        $jsonSchema = new JsonSchema(json_encode($value));

        parent::assertFalse($jsonSchema->validate('{"type":"number","default":0,"minimum":0,"maximum":120,"exclusiveMinimum":0,"exclusiveMaximum":2147483647}'));
        parent::assertEquals(count($jsonSchema->getErrors()), 1);


        echo 'integer', PHP_EOL;
        $value = 123;
        $jsonSchema = new JsonSchema(json_encode($value));

        parent::assertFalse($jsonSchema->validate('{"type":"integer","default":0,"minimum":321,"maximum":2147483647,"exclusiveMinimum":0,"exclusiveMaximum":2147483647}'));
        parent::assertEquals(count($jsonSchema->getErrors()), 1);



        echo 'boolean', PHP_EOL;
        $value = 12;
        $jsonSchema = new JsonSchema(json_encode($value));

        parent::assertFalse($jsonSchema->validate('{"type":"boolean","default":false}'));
        parent::assertEquals(count($jsonSchema->getErrors()), 1);


        echo 'integer or boolean', PHP_EOL;
        $value = "a string";
        $jsonSchema = new JsonSchema(json_encode($value));

        parent::assertFalse($jsonSchema->validate('{"type":["boolean","integer"],"default":false}'));
        parent::assertEquals(count($jsonSchema->getErrors()), 2);
        $value = 123.321;
        $jsonSchema = new JsonSchema(json_encode($value));
        parent::assertFalse($jsonSchema->validate('{"type":["boolean","integer"],"default":false}'));
        parent::assertEquals(count($jsonSchema->getErrors()), 2);


        echo 'object', PHP_EOL;
        $value = new stdClass();
        $value->name = 'a name';
        $value->age = 30;
        $value->height = "183";
        $jsonSchema = new JsonSchema(json_encode($value));

        parent::assertFalse($jsonSchema->validate('{"type":"object","properties":{"name":{"type":"boolean"},"age":{"type":"integer","default":0,"minimum":20,"maximum":25,"exclusiveMinimum":20,"exclusiveMaximum":25},"height":{"type":"number","default":0,"minimum":0,"maximum":2147483647,"exclusiveMinimum":0,"exclusiveMaximum":2147483647}}}'));
        parent::assertEquals(count($jsonSchema->getErrors()), 1);



        echo 'array Map', PHP_EOL;
        $value = array();
        $value['name'] = 'a name';
        $value['age'] = 23;
        $value['height'] = 183.5;
        $jsonSchema = new JsonSchema(json_encode($value));

        parent::assertFalse($jsonSchema->validate('{"type":"object","properties":{"name":{"type":"boolean"},"age":{"type":"integer","default":0,"minimum":20,"maximum":25,"exclusiveMinimum":20,"exclusiveMaximum":25},"height":{"type":"number","default":0,"minimum":0,"maximum":2147483647,"exclusiveMinimum":0,"exclusiveMaximum":2147483647}}}'));
        parent::assertEquals(count($jsonSchema->getErrors()), 1);


        echo 'array List', PHP_EOL;
        $value = array();
        $value[] = 'str A';
        $value[] = 'str B';
        $value[] = 'str C';
        $jsonSchema = new JsonSchema(json_encode($value));

        parent::assertFalse($jsonSchema->validate('
            {
               "type":"array",
               "items":{
                  "type":"string",
                  "format":"regex","pattern":"/^[a-z0-9]+$/i",
                  "minLength":0,
                  "maxLength":2147483647
               }
            }'));
        parent::assertEquals(count($jsonSchema->getErrors()), 1);


        echo 'array List<Map>', PHP_EOL;
        $value = array();
        $value['users'][] = array('id' => 1, 'account' => 'userA');
        $value['users'][] = array('id' => 3, 'account' => 'userB');
        $value['users'][] = array('id' => 5, 'account' => 'userC');
        $jsonSchema = new JsonSchema(json_encode($value));

        parent::assertFalse($jsonSchema->validate('{
                               "type":"object",
                               "properties":{
                                  "users":{
                                     "type":"array",
                                     "items":{
                                        "type":"object",
                                        "properties":{
                                           "id":{
                                              "type":"integer",
                                              "default":0,
                                              "minimum":0,
                                              "maximum":2147483647,
                                              "exclusiveMinimum":0,
                                              "exclusiveMaximum":2147483647
                                           },
                                           "account":{
                                              "type":"string",
                                              "minLength":0,
                                              "maxLength":3
                                           }
                                        }
                                     }
                                  }
                               }
                            }'));
        parent::assertEquals(count($jsonSchema->getErrors()), 1);


        echo 'array List<Map>', PHP_EOL;
        $value = array();
        $value['users'][] = array('id' => 1, 'account' => 'userA');
        $value['users'][] = array('id' => 3, 'account' => 'userB');
        $value['users'][] = array('id' => 5, 'account' => 'userC');
        $jsonSchema = new JsonSchema(json_encode($value));

        parent::assertFalse($jsonSchema->validate('{
                               "type":"object",
                               "properties":{
                                  "users":{
                                     "type":"array",
                                     "minItems":20,
                                     "maxItems":50,
                                     "items":{
                                        "type":"object",
                                        "properties":{
                                           "id":{
                                              "type":"integer",
                                              "default":0,
                                              "minimum":0,
                                              "maximum":2147483647,
                                              "exclusiveMinimum":0,
                                              "exclusiveMaximum":2147483647
                                           },
                                           "account":{
                                              "type":"string",
                                              "minLength":0,
                                              "maxLength":3
                                           }
                                        }
                                     }
                                  }
                               }
                            }'));
        parent::assertEquals(count($jsonSchema->getErrors()), 1);

        $userType = '
            {
                "id": "user",
                "description": "user info",
                "type": "object",
                "optional": true,
                "properties": {
                    "account": {"type": "boolean"},
                    "email": {"type": "string", "optional": true}
                }
            }';

        echo 'array List<Map>', PHP_EOL;
        $type = array();
        $type['users'][] = array('account' => 'userA', 'email' => 'userA@example.com');
        $type['users'][] = array('account' => 'userB', 'email' => 'userB@example.com');
        $type['users'][] = array('account' => 'userC', 'email' => 'userC@example.com');
        $jsonSchema = new JsonSchema(json_encode($type));
        $jsonSchema->addType($userType);
        parent::assertFalse($jsonSchema->validate('
            {
               "type":"object",
               "properties":{
                  "users":{
                     "type":"array",
                     "items":{
                        "$ref":"user"
                     }
                  }
               }
            }'));
        parent::assertEquals(count($jsonSchema->getErrors()), 1);
    }

}

?>
